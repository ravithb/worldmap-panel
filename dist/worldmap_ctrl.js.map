{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","kbn","_","mapRenderer","DataFormatter","panelDefaults","maxDataPoints","mapCenter","mapCenterLatitude","mapCenterLongitude","initialZoom","valueName","circleMinSize","circleMaxSize","locationData","thresholds","colors","unitSingle","unitPlural","showLegend","mouseWheelZoom","showTrail","showAsAntPath","antPathDelay","useCustomAntPathColor","antPathColor","antPathPulseColor","mapTileServer","esMetric","decimals","hideEmpty","hideZero","stickyLabels","tableQueryOptions","queryType","geohashField","latitudeField","longitudeField","metricField","mapCenters","WorldmapCtrl","$scope","$injector","contextSrv","context","defaults","panel","tileServer","currentTileServer","setMapProvider","console","log","dataFormatter","events","on","onInitEditMode","bind","onDataReceived","onPanelTeardown","onDataSnapshotLoad","loadLocationDataFromFile","user","lightTheme","setMapSaturationClass","map","remove","render","saturationClass","reload","snapshotLocationData","locations","jsonpUrl","jsonpCallback","window","$","ajax","type","url","contentType","dataType","success","res","jsonUrl","getJSON","then","reloadLocations","refresh","addEditorTab","dataList","dashboard","snapshot","data","setGeohashValues","tableData","tableHandler","setTableValues","series","setJsonValues","seriesHandler","setValues","updateThresholdData","length","centerOnLastGeoHash","last","locationLatitude","locationLongitude","setNewMapCenter","snapshotData","seriesData","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","mapCenterMoved","setZoom","removeLegend","setMouseWheelZoom","clearCircles","setShowAsAntPath","setAntPathOptions","legend","update","split","strValue","Number","trim","size","pop","newColor","push","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"worldmap_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n\nimport _ from 'lodash';\nimport mapRenderer from './map_renderer';\nimport DataFormatter from './data_formatter';\nimport './css/worldmap-panel.css!';\n\nconst panelDefaults = {\n  maxDataPoints: 1,\n  mapCenter: '(0Â°, 0Â°)',\n  mapCenterLatitude: 0,\n  mapCenterLongitude: 0,\n  initialZoom: 1,\n  valueName: 'total',\n  circleMinSize: 2,\n  circleMaxSize: 30,\n  locationData: 'countries',\n  thresholds: '0,10',\n  colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n  unitSingle: '',\n  unitPlural: '',\n  showLegend: true,\n  mouseWheelZoom: false,\n  showTrail: false,\n  showAsAntPath: false,\n  antPathDelay: 400,\n  useCustomAntPathColor: false,\n  antPathColor: 'rgba(50, 172, 45, 0.97)',\n  antPathPulseColor: '#FFFFFF',\n  mapTileServer: 'CartoDB',\n  esMetric: 'Count',\n  decimals: 0,\n  hideEmpty: false,\n  hideZero: false,\n  stickyLabels: false,\n  tableQueryOptions: {\n    queryType: 'geohash',\n    geohashField: 'geohash',\n    latitudeField: 'latitude',\n    longitudeField: 'longitude',\n    metricField: 'metric'\n  }\n\n};\n\nconst mapCenters = {\n  '(0Â°, 0Â°)': {mapCenterLatitude: 0, mapCenterLongitude: 0},\n  'North America': {mapCenterLatitude: 40, mapCenterLongitude: -100},\n  'Europe': {mapCenterLatitude: 46, mapCenterLongitude: 14},\n  'West Asia': {mapCenterLatitude: 26, mapCenterLongitude: 53},\n  'SE Asia': {mapCenterLatitude: 10, mapCenterLongitude: 106},\n  'Last GeoHash': {mapCenterLatitude: 0, mapCenterLongitude: 0}\n};\n\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\n  currentTileServer;\n  context;\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n    this.context = contextSrv;\n    _.defaults(this.panel, panelDefaults);\n    this.tileServer = this.panel.mapTileServer;\n    this.currentTileServer = this.panel.mapTileServer;\n    this.setMapProvider(contextSrv);\n\n    console.log('onInit current = %o', this.currentTileServer);\n    this.dataFormatter = new DataFormatter(this, kbn);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    this.loadLocationDataFromFile();\n  }\n\n  setMapProvider(contextSrv) {\n    switch (this.panel.mapTileServer) {\n      case 'Open Street Maps':\n        this.tileServer = 'Open Street Maps';\n        break;\n      case 'Stamen Maps':\n        this.tileServer = 'Stamen Maps';\n        break;\n      case 'CartoDB':\n      default:\n        this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\n        break;\n    }\n    this.setMapSaturationClass();\n  }\n\n  changeMapProvider() {\n    console.log('This = %o, Current = %o', this.panel.mapTileServer, this.currentTileServer);\n    if (this.panel.mapTileServer !== this.currentTileServer) {\n      this.setMapProvider(this.context);\n      if (this.map) {\n        this.map.remove();\n        this.map = null;\n      }\n\n      this.currentTileServer = this.tileServer;\n      this.render();\n    }\n  }\n\n  setMapSaturationClass() {\n    if (this.tileServer === 'CartoDB Dark') {\n      this.saturationClass = 'map-darken';\n    } else {\n      this.saturationClass = '';\n    }\n  }\n\n  loadLocationDataFromFile(reload) {\n    if (this.map && !reload) return;\n\n    if (this.panel.snapshotLocationData) {\n      this.locations = this.panel.snapshotLocationData;\n      return;\n    }\n\n    if (this.panel.locationData === 'jsonp endpoint') {\n      if (!this.panel.jsonpUrl || !this.panel.jsonpCallback) return;\n\n      window.$.ajax({\n        type: 'GET',\n        url: this.panel.jsonpUrl + '?callback=?',\n        contentType: 'application/json',\n        jsonpCallback: this.panel.jsonpCallback,\n        dataType: 'jsonp',\n        success: (res) => {\n          this.locations = res;\n          this.render();\n        }\n      });\n    } else if (this.panel.locationData === 'json endpoint') {\n      if (!this.panel.jsonUrl) return;\n\n      window.$.getJSON(this.panel.jsonUrl).then((res) => {\n        this.locations = res;\n        this.render();\n      });\n    } else if (this.panel.locationData === 'table') {\n      // .. Do nothing\n    } else if (this.panel.locationData !== 'geohash' && this.panel.locationData !== 'json result') {\n      window.$.getJSON('public/plugins/grafana-custom-worldmap-panel/data/' + this.panel.locationData + '.json')\n        .then(this.reloadLocations.bind(this));\n    }\n  }\n\n  reloadLocations(res) {\n    this.locations = res;\n    this.refresh();\n  }\n\n  showTableGeohashOptions() {\n    return this.panel.locationData === 'table' && this.panel.tableQueryOptions.queryType === 'geohash';\n  }\n\n  showTableCoordinateOptions() {\n    return this.panel.locationData === 'table' && this.panel.tableQueryOptions.queryType === 'coordinates';\n  }\n\n  onPanelTeardown() {\n    if (this.map) this.map.remove();\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', 'public/plugins/ravithb-grafana-custom-worldmap-panel/partials/editor.html', 2);\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n\n    if (this.dashboard.snapshot && this.locations) {\n      this.panel.snapshotLocationData = this.locations;\n    }\n\n    const data = [];\n\n    if (this.panel.locationData === 'geohash') {\n      this.dataFormatter.setGeohashValues(dataList, data);\n    } else if (this.panel.locationData === 'table') {\n      const tableData = dataList.map(DataFormatter.tableHandler.bind(this));\n      this.dataFormatter.setTableValues(tableData, data);\n    } else if (this.panel.locationData === 'json result') {\n      this.series = dataList;\n      this.dataFormatter.setJsonValues(data);\n    } else {\n      this.series = dataList.map(this.seriesHandler.bind(this));\n      this.dataFormatter.setValues(data);\n    }\n    this.data = data;\n\n    this.updateThresholdData();\n\n    if (this.data.length && this.panel.mapCenter === 'Last GeoHash') {\n      this.centerOnLastGeoHash();\n    } else {\n      this.render();\n    }\n  }\n\n  centerOnLastGeoHash() {\n    mapCenters[this.panel.mapCenter].mapCenterLatitude = _.last(this.data).locationLatitude;\n    mapCenters[this.panel.mapCenter].mapCenterLongitude = _.last(this.data).locationLongitude;\n    this.setNewMapCenter();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  setNewMapCenter() {\n    if (this.panel.mapCenter !== 'custom') {\n      this.panel.mapCenterLatitude = mapCenters[this.panel.mapCenter].mapCenterLatitude;\n      this.panel.mapCenterLongitude = mapCenters[this.panel.mapCenter].mapCenterLongitude;\n    }\n    this.mapCenterMoved = true;\n    this.render();\n  }\n\n  setZoom() {\n    this.map.setZoom(this.panel.initialZoom || 1);\n  }\n\n  toggleLegend() {\n    if (!this.panel.showLegend) {\n      this.map.removeLegend();\n    }\n    this.render();\n  }\n\n  toggleMouseWheelZoom() {\n    this.map.setMouseWheelZoom();\n    this.render();\n  }\n\n  toggleStickyLabels() {\n    this.map.clearCircles();\n    this.render();\n  }\n\n  toggleShowTrail() {\n    this.map.showTrail(this.panel.showTrail);\n  }\n\n  toggleShowAsAntPath() {\n    this.map.setShowAsAntPath(this.panel.showAsAntPath);\n  }\n\n  changeAntpathOptions() {\n    this.map.setAntPathOptions(this.panel.antPathDelay,\n      this.panel.useCustomAntPathColor,\n      this.panel.antPathColor,\n      this.panel.antPathPulseColor);\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.map.legend.update();\n    this.render();\n  }\n\n  updateThresholdData() {\n    this.data.thresholds = this.panel.thresholds.split(',').map((strValue) => {\n      return Number(strValue.trim());\n    });\n    while (_.size(this.panel.colors) > _.size(this.data.thresholds) + 1) {\n      // too many colors. remove the last one.\n      this.panel.colors.pop();\n    }\n    while (_.size(this.panel.colors) < _.size(this.data.thresholds) + 1) {\n      // not enough colors. add one.\n      const newColor = 'rgba(50, 172, 45, 0.97)';\n      this.panel.colors.push(newColor);\n    }\n  }\n\n  changeLocationData() {\n    this.loadLocationDataFromFile(true);\n\n    if (this.panel.locationData === 'geohash') {\n      this.render();\n    }\n  }\n\n/* eslint class-methods-use-this: 0 */\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n}\n\nWorldmapCtrl.templateUrl = 'module.html';\n"]}